# utils/ddl_writer.py


import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def save_ddl(target: str, schema: str, object_name: str, ddl_statement: str, object_type: str):
    """
    Save DDL to:
    - generated_ddls/{target}/{schema}/<object_type>/<object_name>.sql
    - Append to generated_ddls/{target}/{schema}/{schema}.sql
    """
    object_type = object_type.lower()
    folder_name_map = {
        "table": "tables",
        "sequence": "sequences",  
        "trigger": "triggers",
        "index": "index",
        "view": "views",
    }
    folder_type = folder_name_map.get(object_type, "others")

    ddl_folder = os.path.join(BASE_DIR, f"generated_ddls/{target}/{schema}/{folder_type}")
    os.makedirs(ddl_folder, exist_ok=True)

    combined_ddl_path = os.path.join(BASE_DIR, f"generated_ddls/{target}/{schema}/{schema}.sql")
    os.makedirs(os.path.dirname(combined_ddl_path), exist_ok=True)

    with open(combined_ddl_path, "a", encoding="utf-8") as combined_file:
        combined_file.write(f"\n\n-- {object_type.upper()}: {schema}.{object_name}\n")
        combined_file.write(ddl_statement.strip() + "\n")

    individual_ddl_path = os.path.join(ddl_folder, f"{object_name}.sql")
    with open(individual_ddl_path, "w", encoding="utf-8") as individual_file:
        individual_file.write(f"-- {object_type.upper()}: {schema}.{object_name}\n")
        individual_file.write(ddl_statement.strip() + "\n")


def create_ddl_summary(
        target: str,
        schema: str,
        sequences: list = None,
        tables: list = None,
        triggers: list = None,
        indexes: list = None,
        views: list = None,
):
    """
    Generate a Markdown summary of saved DDLs for all object types in a unified structure.
    """
    sequences = sequences or []
    tables = tables or []
    triggers = triggers or []
    indexes = indexes or []
    views = views or []

    summary_dir = os.path.join(BASE_DIR, f"generated_ddls/{target}/{schema}")
    os.makedirs(summary_dir, exist_ok=True)
    summary_path = os.path.join(summary_dir, "SUMMARY.md")

    with open(summary_path, "w", encoding="utf-8") as f:
        f.write(f"# DDL Summary for {target.upper()} schema `{schema}`\n\n")
        f.write(f"_Generated by script_\n\n")

        if sequences:
            f.write(f"## Sequences ({len(sequences)})\n")
            for seq in sequences:
                seq_name = seq.get("sequence") if isinstance(seq, dict) else seq
                f.write(f"- {seq_name}\n")
            f.write("\n")

        if tables:
            f.write(f"## Tables ({len(tables)})\n")
            for tbl in tables:
                tbl_name = tbl.get("table") if isinstance(tbl, dict) else tbl
                f.write(f"- {tbl_name}\n")
            f.write("\n")

        if triggers:
            f.write(f"## Triggers ({len(triggers)})\n")
            for trg in triggers:
                trg_name = trg.get("trigger") if isinstance(trg, dict) else trg
                f.write(f"- {trg_name}\n")
            f.write("\n")

        if indexes:
            f.write(f"## Indexes ({len(indexes)})\n")
            for idx in indexes:
                idx_name = idx.get("index") if isinstance(idx, dict) else idx
                f.write(f"- {idx_name}\n")
            f.write("\n")

        if views:
            f.write(f"## Views ({len(views)})\n")
            for vw in views:
                vw_name = vw.get("view") if isinstance(vw, dict) else vw
                f.write(f"- {vw_name}\n")
            f.write("\n")

        # Directory tree structure
        f.write("## Directory structure\n")
        f.write("```\n")
        f.write(f"generated_ddls/{target}/{schema}/\n")
        f.write(f"├── {schema}.sql\n")
        f.write(f"├── SUMMARY.md\n")
        if sequences:
            f.write("├── sequences/\n")
            for seq in sequences:
                seq_name = seq.get("sequence") if isinstance(seq, dict) else seq
                f.write(f"│   └── {seq_name}.sql\n")
        if tables:
            f.write("├── tables/\n")
            for tbl in tables:
                tbl_name = tbl.get("table") if isinstance(tbl, dict) else tbl
                f.write(f"│   └── {tbl_name}.sql\n")
        if triggers:
            f.write("├── triggers/\n")
            for trg in triggers:
                trg_name = trg.get("trigger") if isinstance(trg, dict) else trg
                f.write(f"│   └── {trg_name}.sql\n")
        if indexes:
            f.write("├── index/\n")
            for idx in indexes:
                idx_name = idx.get("index") if isinstance(idx, dict) else idx
                f.write(f"│   └── {idx_name}.sql\n")
        if views:
            f.write("└── views/\n")
            for vw in views:
                vw_name = vw.get("view") if isinstance(vw, dict) else vw
                f.write(f"    └── {vw_name}.sql\n")
        f.write("```\n")

    print(f"Summary Markdown file generated at: {summary_path}")
